// Code generated by Mockc. DO NOT EDIT.
// repo: https://github.com/KimMachineGun/mockc

//go:generate mockc
// +build !mockc

package basic

import (
	"sync"
	"unsafe"
)

var _ interface {
	TypeCode
} = &MockcTypeCode{}

type MockcTypeCode struct {
	// method: Array
	_Array struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 [][0]bool
			}
			Results struct {
				R0 [0]bool
			}
		}
		// params
		Params struct {
			P0 [][0]bool
		}
		// results
		Results struct {
			R0 [0]bool
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...[0]bool) [0]bool
	}
	// method: Bool
	_Bool struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []bool
			}
			Results struct {
				R0 bool
			}
		}
		// params
		Params struct {
			P0 []bool
		}
		// results
		Results struct {
			R0 bool
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...bool) bool
	}
	// method: BoolP
	_BoolP struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []*bool
			}
			Results struct {
				R0 *bool
			}
		}
		// params
		Params struct {
			P0 []*bool
		}
		// results
		Results struct {
			R0 *bool
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...*bool) *bool
	}
	// method: Byte
	_Byte struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []byte
			}
			Results struct {
				R0 byte
			}
		}
		// params
		Params struct {
			P0 []byte
		}
		// results
		Results struct {
			R0 byte
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...byte) byte
	}
	// method: Chan
	_Chan struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []chan bool
			}
			Results struct {
				R0 chan<- int
				R1 <-chan int8
			}
		}
		// params
		Params struct {
			P0 []chan bool
		}
		// results
		Results struct {
			R0 chan<- int
			R1 <-chan int8
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...chan bool) (chan<- int, <-chan int8)
	}
	// method: Complex128
	_Complex128 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []complex128
			}
			Results struct {
				R0 complex128
			}
		}
		// params
		Params struct {
			P0 []complex128
		}
		// results
		Results struct {
			R0 complex128
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...complex128) complex128
	}
	// method: Complex64
	_Complex64 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []complex64
			}
			Results struct {
				R0 complex64
			}
		}
		// params
		Params struct {
			P0 []complex64
		}
		// results
		Results struct {
			R0 complex64
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...complex64) complex64
	}
	// method: Float32
	_Float32 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []float32
			}
			Results struct {
				R0 float32
			}
		}
		// params
		Params struct {
			P0 []float32
		}
		// results
		Results struct {
			R0 float32
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...float32) float32
	}
	// method: Float64
	_Float64 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []float64
			}
			Results struct {
				R0 float64
			}
		}
		// params
		Params struct {
			P0 []float64
		}
		// results
		Results struct {
			R0 float64
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...float64) float64
	}
	// method: Func
	_Func struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 func(bool, int, ...int8) (int32, int64)
			}
			Results struct {
				R0 func() error
			}
		}
		// params
		Params struct {
			P0 func(bool, int, ...int8) (int32, int64)
		}
		// results
		Results struct {
			R0 func() error
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(func(bool, int, ...int8) (int32, int64)) func() error
	}
	// method: Int
	_Int struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []int
			}
			Results struct {
				R0 int
			}
		}
		// params
		Params struct {
			P0 []int
		}
		// results
		Results struct {
			R0 int
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...int) int
	}
	// method: Int16
	_Int16 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []int16
			}
			Results struct {
				R0 int16
			}
		}
		// params
		Params struct {
			P0 []int16
		}
		// results
		Results struct {
			R0 int16
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...int16) int16
	}
	// method: Int32
	_Int32 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []int32
			}
			Results struct {
				R0 int32
			}
		}
		// params
		Params struct {
			P0 []int32
		}
		// results
		Results struct {
			R0 int32
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...int32) int32
	}
	// method: Int64
	_Int64 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []int64
			}
			Results struct {
				R0 int64
			}
		}
		// params
		Params struct {
			P0 []int64
		}
		// results
		Results struct {
			R0 int64
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...int64) int64
	}
	// method: Int8
	_Int8 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []int8
			}
			Results struct {
				R0 int8
			}
		}
		// params
		Params struct {
			P0 []int8
		}
		// results
		Results struct {
			R0 int8
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...int8) int8
	}
	// method: Interface
	_Interface struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []interface{}
			}
			Results struct {
				R0 interface {
					Hello() string
					World() string
				}
			}
		}
		// params
		Params struct {
			P0 []interface{}
		}
		// results
		Results struct {
			R0 interface {
				Hello() string
				World() string
			}
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...interface{}) interface {
			Hello() string
			World() string
		}
	}
	// method: Map
	_Map struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []map[bool]int
			}
			Results struct {
				R0 map[bool]int
			}
		}
		// params
		Params struct {
			P0 []map[bool]int
		}
		// results
		Results struct {
			R0 map[bool]int
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...map[bool]int) map[bool]int
	}
	// method: Pointer
	_Pointer struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []unsafe.Pointer
			}
			Results struct {
				R0 unsafe.Pointer
			}
		}
		// params
		Params struct {
			P0 []unsafe.Pointer
		}
		// results
		Results struct {
			R0 unsafe.Pointer
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...unsafe.Pointer) unsafe.Pointer
	}
	// method: Rune
	_Rune struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []rune
			}
			Results struct {
				R0 rune
			}
		}
		// params
		Params struct {
			P0 []rune
		}
		// results
		Results struct {
			R0 rune
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...rune) rune
	}
	// method: Slice
	_Slice struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 [][]bool
			}
			Results struct {
				R0 []bool
			}
		}
		// params
		Params struct {
			P0 [][]bool
		}
		// results
		Results struct {
			R0 []bool
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...[]bool) []bool
	}
	// method: String
	_String struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []string
			}
			Results struct {
				R0 string
			}
		}
		// params
		Params struct {
			P0 []string
		}
		// results
		Results struct {
			R0 string
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...string) string
	}
	// method: Struct
	_Struct struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []struct {
					A bool
					anon
				}
			}
			Results struct {
				R0 struct {
					B int
				}
			}
		}
		// params
		Params struct {
			P0 []struct {
				A bool
				anon
			}
		}
		// results
		Results struct {
			R0 struct {
				B int
			}
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...struct {
			A bool
			anon
		}) struct {
			B int
		}
	}
	// method: Tuple
	_Tuple struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Results struct {
				R0 bool
				R1 int
				R2 int8
			}
		}
		// results
		Results struct {
			R0 bool
			R1 int
			R2 int8
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func() (bool, int, int8)
	}
	// method: Uint
	_Uint struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uint
			}
			Results struct {
				R0 uint
			}
		}
		// params
		Params struct {
			P0 []uint
		}
		// results
		Results struct {
			R0 uint
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uint) uint
	}
	// method: Uint16
	_Uint16 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uint16
			}
			Results struct {
				R0 uint16
			}
		}
		// params
		Params struct {
			P0 []uint16
		}
		// results
		Results struct {
			R0 uint16
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uint16) uint16
	}
	// method: Uint32
	_Uint32 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uint32
			}
			Results struct {
				R0 uint32
			}
		}
		// params
		Params struct {
			P0 []uint32
		}
		// results
		Results struct {
			R0 uint32
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uint32) uint32
	}
	// method: Uint64
	_Uint64 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uint64
			}
			Results struct {
				R0 uint64
			}
		}
		// params
		Params struct {
			P0 []uint64
		}
		// results
		Results struct {
			R0 uint64
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uint64) uint64
	}
	// method: Uint8
	_Uint8 struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uint8
			}
			Results struct {
				R0 uint8
			}
		}
		// params
		Params struct {
			P0 []uint8
		}
		// results
		Results struct {
			R0 uint8
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uint8) uint8
	}
	// method: Uintptr
	_Uintptr struct {
		mu sync.Mutex
		// basics
		Called    bool
		CallCount int
		// call history
		History []struct {
			Params struct {
				P0 []uintptr
			}
			Results struct {
				R0 uintptr
			}
		}
		// params
		Params struct {
			P0 []uintptr
		}
		// results
		Results struct {
			R0 uintptr
		}
		// if it is not nil, it'll be called in the middle of the method.
		Body func(...uintptr) uintptr
	}
}

func (recv *MockcTypeCode) Array(p0 ...[0]bool) [0]bool {
	recv._Array.mu.Lock()
	defer recv._Array.mu.Unlock()
	// basics
	recv._Array.Called = true
	recv._Array.CallCount++
	// params
	recv._Array.Params.P0 = p0
	// body
	if recv._Array.Body != nil {
		recv._Array.Results.R0 = recv._Array.Body(p0...)
	}
	// call history
	recv._Array.History = append(recv._Array.History, struct {
		Params struct {
			P0 [][0]bool
		}
		Results struct {
			R0 [0]bool
		}
	}{
		Params:  recv._Array.Params,
		Results: recv._Array.Results,
	})
	// results
	return recv._Array.Results.R0
}

func (recv *MockcTypeCode) Bool(p0 ...bool) bool {
	recv._Bool.mu.Lock()
	defer recv._Bool.mu.Unlock()
	// basics
	recv._Bool.Called = true
	recv._Bool.CallCount++
	// params
	recv._Bool.Params.P0 = p0
	// body
	if recv._Bool.Body != nil {
		recv._Bool.Results.R0 = recv._Bool.Body(p0...)
	}
	// call history
	recv._Bool.History = append(recv._Bool.History, struct {
		Params struct {
			P0 []bool
		}
		Results struct {
			R0 bool
		}
	}{
		Params:  recv._Bool.Params,
		Results: recv._Bool.Results,
	})
	// results
	return recv._Bool.Results.R0
}

func (recv *MockcTypeCode) BoolP(p0 ...*bool) *bool {
	recv._BoolP.mu.Lock()
	defer recv._BoolP.mu.Unlock()
	// basics
	recv._BoolP.Called = true
	recv._BoolP.CallCount++
	// params
	recv._BoolP.Params.P0 = p0
	// body
	if recv._BoolP.Body != nil {
		recv._BoolP.Results.R0 = recv._BoolP.Body(p0...)
	}
	// call history
	recv._BoolP.History = append(recv._BoolP.History, struct {
		Params struct {
			P0 []*bool
		}
		Results struct {
			R0 *bool
		}
	}{
		Params:  recv._BoolP.Params,
		Results: recv._BoolP.Results,
	})
	// results
	return recv._BoolP.Results.R0
}

func (recv *MockcTypeCode) Byte(p0 ...byte) byte {
	recv._Byte.mu.Lock()
	defer recv._Byte.mu.Unlock()
	// basics
	recv._Byte.Called = true
	recv._Byte.CallCount++
	// params
	recv._Byte.Params.P0 = p0
	// body
	if recv._Byte.Body != nil {
		recv._Byte.Results.R0 = recv._Byte.Body(p0...)
	}
	// call history
	recv._Byte.History = append(recv._Byte.History, struct {
		Params struct {
			P0 []byte
		}
		Results struct {
			R0 byte
		}
	}{
		Params:  recv._Byte.Params,
		Results: recv._Byte.Results,
	})
	// results
	return recv._Byte.Results.R0
}

func (recv *MockcTypeCode) Chan(p0 ...chan bool) (chan<- int, <-chan int8) {
	recv._Chan.mu.Lock()
	defer recv._Chan.mu.Unlock()
	// basics
	recv._Chan.Called = true
	recv._Chan.CallCount++
	// params
	recv._Chan.Params.P0 = p0
	// body
	if recv._Chan.Body != nil {
		recv._Chan.Results.R0, recv._Chan.Results.R1 = recv._Chan.Body(p0...)
	}
	// call history
	recv._Chan.History = append(recv._Chan.History, struct {
		Params struct {
			P0 []chan bool
		}
		Results struct {
			R0 chan<- int
			R1 <-chan int8
		}
	}{
		Params:  recv._Chan.Params,
		Results: recv._Chan.Results,
	})
	// results
	return recv._Chan.Results.R0, recv._Chan.Results.R1
}

func (recv *MockcTypeCode) Complex128(p0 ...complex128) complex128 {
	recv._Complex128.mu.Lock()
	defer recv._Complex128.mu.Unlock()
	// basics
	recv._Complex128.Called = true
	recv._Complex128.CallCount++
	// params
	recv._Complex128.Params.P0 = p0
	// body
	if recv._Complex128.Body != nil {
		recv._Complex128.Results.R0 = recv._Complex128.Body(p0...)
	}
	// call history
	recv._Complex128.History = append(recv._Complex128.History, struct {
		Params struct {
			P0 []complex128
		}
		Results struct {
			R0 complex128
		}
	}{
		Params:  recv._Complex128.Params,
		Results: recv._Complex128.Results,
	})
	// results
	return recv._Complex128.Results.R0
}

func (recv *MockcTypeCode) Complex64(p0 ...complex64) complex64 {
	recv._Complex64.mu.Lock()
	defer recv._Complex64.mu.Unlock()
	// basics
	recv._Complex64.Called = true
	recv._Complex64.CallCount++
	// params
	recv._Complex64.Params.P0 = p0
	// body
	if recv._Complex64.Body != nil {
		recv._Complex64.Results.R0 = recv._Complex64.Body(p0...)
	}
	// call history
	recv._Complex64.History = append(recv._Complex64.History, struct {
		Params struct {
			P0 []complex64
		}
		Results struct {
			R0 complex64
		}
	}{
		Params:  recv._Complex64.Params,
		Results: recv._Complex64.Results,
	})
	// results
	return recv._Complex64.Results.R0
}

func (recv *MockcTypeCode) Float32(p0 ...float32) float32 {
	recv._Float32.mu.Lock()
	defer recv._Float32.mu.Unlock()
	// basics
	recv._Float32.Called = true
	recv._Float32.CallCount++
	// params
	recv._Float32.Params.P0 = p0
	// body
	if recv._Float32.Body != nil {
		recv._Float32.Results.R0 = recv._Float32.Body(p0...)
	}
	// call history
	recv._Float32.History = append(recv._Float32.History, struct {
		Params struct {
			P0 []float32
		}
		Results struct {
			R0 float32
		}
	}{
		Params:  recv._Float32.Params,
		Results: recv._Float32.Results,
	})
	// results
	return recv._Float32.Results.R0
}

func (recv *MockcTypeCode) Float64(p0 ...float64) float64 {
	recv._Float64.mu.Lock()
	defer recv._Float64.mu.Unlock()
	// basics
	recv._Float64.Called = true
	recv._Float64.CallCount++
	// params
	recv._Float64.Params.P0 = p0
	// body
	if recv._Float64.Body != nil {
		recv._Float64.Results.R0 = recv._Float64.Body(p0...)
	}
	// call history
	recv._Float64.History = append(recv._Float64.History, struct {
		Params struct {
			P0 []float64
		}
		Results struct {
			R0 float64
		}
	}{
		Params:  recv._Float64.Params,
		Results: recv._Float64.Results,
	})
	// results
	return recv._Float64.Results.R0
}

func (recv *MockcTypeCode) Func(p0 func(bool, int, ...int8) (int32, int64)) func() error {
	recv._Func.mu.Lock()
	defer recv._Func.mu.Unlock()
	// basics
	recv._Func.Called = true
	recv._Func.CallCount++
	// params
	recv._Func.Params.P0 = p0
	// body
	if recv._Func.Body != nil {
		recv._Func.Results.R0 = recv._Func.Body(p0)
	}
	// call history
	recv._Func.History = append(recv._Func.History, struct {
		Params struct {
			P0 func(bool, int, ...int8) (int32, int64)
		}
		Results struct {
			R0 func() error
		}
	}{
		Params:  recv._Func.Params,
		Results: recv._Func.Results,
	})
	// results
	return recv._Func.Results.R0
}

func (recv *MockcTypeCode) Int(p0 ...int) int {
	recv._Int.mu.Lock()
	defer recv._Int.mu.Unlock()
	// basics
	recv._Int.Called = true
	recv._Int.CallCount++
	// params
	recv._Int.Params.P0 = p0
	// body
	if recv._Int.Body != nil {
		recv._Int.Results.R0 = recv._Int.Body(p0...)
	}
	// call history
	recv._Int.History = append(recv._Int.History, struct {
		Params struct {
			P0 []int
		}
		Results struct {
			R0 int
		}
	}{
		Params:  recv._Int.Params,
		Results: recv._Int.Results,
	})
	// results
	return recv._Int.Results.R0
}

func (recv *MockcTypeCode) Int16(p0 ...int16) int16 {
	recv._Int16.mu.Lock()
	defer recv._Int16.mu.Unlock()
	// basics
	recv._Int16.Called = true
	recv._Int16.CallCount++
	// params
	recv._Int16.Params.P0 = p0
	// body
	if recv._Int16.Body != nil {
		recv._Int16.Results.R0 = recv._Int16.Body(p0...)
	}
	// call history
	recv._Int16.History = append(recv._Int16.History, struct {
		Params struct {
			P0 []int16
		}
		Results struct {
			R0 int16
		}
	}{
		Params:  recv._Int16.Params,
		Results: recv._Int16.Results,
	})
	// results
	return recv._Int16.Results.R0
}

func (recv *MockcTypeCode) Int32(p0 ...int32) int32 {
	recv._Int32.mu.Lock()
	defer recv._Int32.mu.Unlock()
	// basics
	recv._Int32.Called = true
	recv._Int32.CallCount++
	// params
	recv._Int32.Params.P0 = p0
	// body
	if recv._Int32.Body != nil {
		recv._Int32.Results.R0 = recv._Int32.Body(p0...)
	}
	// call history
	recv._Int32.History = append(recv._Int32.History, struct {
		Params struct {
			P0 []int32
		}
		Results struct {
			R0 int32
		}
	}{
		Params:  recv._Int32.Params,
		Results: recv._Int32.Results,
	})
	// results
	return recv._Int32.Results.R0
}

func (recv *MockcTypeCode) Int64(p0 ...int64) int64 {
	recv._Int64.mu.Lock()
	defer recv._Int64.mu.Unlock()
	// basics
	recv._Int64.Called = true
	recv._Int64.CallCount++
	// params
	recv._Int64.Params.P0 = p0
	// body
	if recv._Int64.Body != nil {
		recv._Int64.Results.R0 = recv._Int64.Body(p0...)
	}
	// call history
	recv._Int64.History = append(recv._Int64.History, struct {
		Params struct {
			P0 []int64
		}
		Results struct {
			R0 int64
		}
	}{
		Params:  recv._Int64.Params,
		Results: recv._Int64.Results,
	})
	// results
	return recv._Int64.Results.R0
}

func (recv *MockcTypeCode) Int8(p0 ...int8) int8 {
	recv._Int8.mu.Lock()
	defer recv._Int8.mu.Unlock()
	// basics
	recv._Int8.Called = true
	recv._Int8.CallCount++
	// params
	recv._Int8.Params.P0 = p0
	// body
	if recv._Int8.Body != nil {
		recv._Int8.Results.R0 = recv._Int8.Body(p0...)
	}
	// call history
	recv._Int8.History = append(recv._Int8.History, struct {
		Params struct {
			P0 []int8
		}
		Results struct {
			R0 int8
		}
	}{
		Params:  recv._Int8.Params,
		Results: recv._Int8.Results,
	})
	// results
	return recv._Int8.Results.R0
}

func (recv *MockcTypeCode) Interface(p0 ...interface{}) interface {
	Hello() string
	World() string
} {
	recv._Interface.mu.Lock()
	defer recv._Interface.mu.Unlock()
	// basics
	recv._Interface.Called = true
	recv._Interface.CallCount++
	// params
	recv._Interface.Params.P0 = p0
	// body
	if recv._Interface.Body != nil {
		recv._Interface.Results.R0 = recv._Interface.Body(p0...)
	}
	// call history
	recv._Interface.History = append(recv._Interface.History, struct {
		Params struct {
			P0 []interface{}
		}
		Results struct {
			R0 interface {
				Hello() string
				World() string
			}
		}
	}{
		Params:  recv._Interface.Params,
		Results: recv._Interface.Results,
	})
	// results
	return recv._Interface.Results.R0
}

func (recv *MockcTypeCode) Map(p0 ...map[bool]int) map[bool]int {
	recv._Map.mu.Lock()
	defer recv._Map.mu.Unlock()
	// basics
	recv._Map.Called = true
	recv._Map.CallCount++
	// params
	recv._Map.Params.P0 = p0
	// body
	if recv._Map.Body != nil {
		recv._Map.Results.R0 = recv._Map.Body(p0...)
	}
	// call history
	recv._Map.History = append(recv._Map.History, struct {
		Params struct {
			P0 []map[bool]int
		}
		Results struct {
			R0 map[bool]int
		}
	}{
		Params:  recv._Map.Params,
		Results: recv._Map.Results,
	})
	// results
	return recv._Map.Results.R0
}

func (recv *MockcTypeCode) Pointer(p0 ...unsafe.Pointer) unsafe.Pointer {
	recv._Pointer.mu.Lock()
	defer recv._Pointer.mu.Unlock()
	// basics
	recv._Pointer.Called = true
	recv._Pointer.CallCount++
	// params
	recv._Pointer.Params.P0 = p0
	// body
	if recv._Pointer.Body != nil {
		recv._Pointer.Results.R0 = recv._Pointer.Body(p0...)
	}
	// call history
	recv._Pointer.History = append(recv._Pointer.History, struct {
		Params struct {
			P0 []unsafe.Pointer
		}
		Results struct {
			R0 unsafe.Pointer
		}
	}{
		Params:  recv._Pointer.Params,
		Results: recv._Pointer.Results,
	})
	// results
	return recv._Pointer.Results.R0
}

func (recv *MockcTypeCode) Rune(p0 ...rune) rune {
	recv._Rune.mu.Lock()
	defer recv._Rune.mu.Unlock()
	// basics
	recv._Rune.Called = true
	recv._Rune.CallCount++
	// params
	recv._Rune.Params.P0 = p0
	// body
	if recv._Rune.Body != nil {
		recv._Rune.Results.R0 = recv._Rune.Body(p0...)
	}
	// call history
	recv._Rune.History = append(recv._Rune.History, struct {
		Params struct {
			P0 []rune
		}
		Results struct {
			R0 rune
		}
	}{
		Params:  recv._Rune.Params,
		Results: recv._Rune.Results,
	})
	// results
	return recv._Rune.Results.R0
}

func (recv *MockcTypeCode) Slice(p0 ...[]bool) []bool {
	recv._Slice.mu.Lock()
	defer recv._Slice.mu.Unlock()
	// basics
	recv._Slice.Called = true
	recv._Slice.CallCount++
	// params
	recv._Slice.Params.P0 = p0
	// body
	if recv._Slice.Body != nil {
		recv._Slice.Results.R0 = recv._Slice.Body(p0...)
	}
	// call history
	recv._Slice.History = append(recv._Slice.History, struct {
		Params struct {
			P0 [][]bool
		}
		Results struct {
			R0 []bool
		}
	}{
		Params:  recv._Slice.Params,
		Results: recv._Slice.Results,
	})
	// results
	return recv._Slice.Results.R0
}

func (recv *MockcTypeCode) String(p0 ...string) string {
	recv._String.mu.Lock()
	defer recv._String.mu.Unlock()
	// basics
	recv._String.Called = true
	recv._String.CallCount++
	// params
	recv._String.Params.P0 = p0
	// body
	if recv._String.Body != nil {
		recv._String.Results.R0 = recv._String.Body(p0...)
	}
	// call history
	recv._String.History = append(recv._String.History, struct {
		Params struct {
			P0 []string
		}
		Results struct {
			R0 string
		}
	}{
		Params:  recv._String.Params,
		Results: recv._String.Results,
	})
	// results
	return recv._String.Results.R0
}

func (recv *MockcTypeCode) Struct(p0 ...struct {
	A bool
	anon
}) struct {
	B int
} {
	recv._Struct.mu.Lock()
	defer recv._Struct.mu.Unlock()
	// basics
	recv._Struct.Called = true
	recv._Struct.CallCount++
	// params
	recv._Struct.Params.P0 = p0
	// body
	if recv._Struct.Body != nil {
		recv._Struct.Results.R0 = recv._Struct.Body(p0...)
	}
	// call history
	recv._Struct.History = append(recv._Struct.History, struct {
		Params struct {
			P0 []struct {
				A bool
				anon
			}
		}
		Results struct {
			R0 struct {
				B int
			}
		}
	}{
		Params:  recv._Struct.Params,
		Results: recv._Struct.Results,
	})
	// results
	return recv._Struct.Results.R0
}

func (recv *MockcTypeCode) Tuple() (bool, int, int8) {
	recv._Tuple.mu.Lock()
	defer recv._Tuple.mu.Unlock()
	// basics
	recv._Tuple.Called = true
	recv._Tuple.CallCount++
	// body
	if recv._Tuple.Body != nil {
		recv._Tuple.Results.R0, recv._Tuple.Results.R1, recv._Tuple.Results.R2 = recv._Tuple.Body()
	}
	// call history
	recv._Tuple.History = append(recv._Tuple.History, struct {
		Results struct {
			R0 bool
			R1 int
			R2 int8
		}
	}{Results: recv._Tuple.Results})
	// results
	return recv._Tuple.Results.R0, recv._Tuple.Results.R1, recv._Tuple.Results.R2
}

func (recv *MockcTypeCode) Uint(p0 ...uint) uint {
	recv._Uint.mu.Lock()
	defer recv._Uint.mu.Unlock()
	// basics
	recv._Uint.Called = true
	recv._Uint.CallCount++
	// params
	recv._Uint.Params.P0 = p0
	// body
	if recv._Uint.Body != nil {
		recv._Uint.Results.R0 = recv._Uint.Body(p0...)
	}
	// call history
	recv._Uint.History = append(recv._Uint.History, struct {
		Params struct {
			P0 []uint
		}
		Results struct {
			R0 uint
		}
	}{
		Params:  recv._Uint.Params,
		Results: recv._Uint.Results,
	})
	// results
	return recv._Uint.Results.R0
}

func (recv *MockcTypeCode) Uint16(p0 ...uint16) uint16 {
	recv._Uint16.mu.Lock()
	defer recv._Uint16.mu.Unlock()
	// basics
	recv._Uint16.Called = true
	recv._Uint16.CallCount++
	// params
	recv._Uint16.Params.P0 = p0
	// body
	if recv._Uint16.Body != nil {
		recv._Uint16.Results.R0 = recv._Uint16.Body(p0...)
	}
	// call history
	recv._Uint16.History = append(recv._Uint16.History, struct {
		Params struct {
			P0 []uint16
		}
		Results struct {
			R0 uint16
		}
	}{
		Params:  recv._Uint16.Params,
		Results: recv._Uint16.Results,
	})
	// results
	return recv._Uint16.Results.R0
}

func (recv *MockcTypeCode) Uint32(p0 ...uint32) uint32 {
	recv._Uint32.mu.Lock()
	defer recv._Uint32.mu.Unlock()
	// basics
	recv._Uint32.Called = true
	recv._Uint32.CallCount++
	// params
	recv._Uint32.Params.P0 = p0
	// body
	if recv._Uint32.Body != nil {
		recv._Uint32.Results.R0 = recv._Uint32.Body(p0...)
	}
	// call history
	recv._Uint32.History = append(recv._Uint32.History, struct {
		Params struct {
			P0 []uint32
		}
		Results struct {
			R0 uint32
		}
	}{
		Params:  recv._Uint32.Params,
		Results: recv._Uint32.Results,
	})
	// results
	return recv._Uint32.Results.R0
}

func (recv *MockcTypeCode) Uint64(p0 ...uint64) uint64 {
	recv._Uint64.mu.Lock()
	defer recv._Uint64.mu.Unlock()
	// basics
	recv._Uint64.Called = true
	recv._Uint64.CallCount++
	// params
	recv._Uint64.Params.P0 = p0
	// body
	if recv._Uint64.Body != nil {
		recv._Uint64.Results.R0 = recv._Uint64.Body(p0...)
	}
	// call history
	recv._Uint64.History = append(recv._Uint64.History, struct {
		Params struct {
			P0 []uint64
		}
		Results struct {
			R0 uint64
		}
	}{
		Params:  recv._Uint64.Params,
		Results: recv._Uint64.Results,
	})
	// results
	return recv._Uint64.Results.R0
}

func (recv *MockcTypeCode) Uint8(p0 ...uint8) uint8 {
	recv._Uint8.mu.Lock()
	defer recv._Uint8.mu.Unlock()
	// basics
	recv._Uint8.Called = true
	recv._Uint8.CallCount++
	// params
	recv._Uint8.Params.P0 = p0
	// body
	if recv._Uint8.Body != nil {
		recv._Uint8.Results.R0 = recv._Uint8.Body(p0...)
	}
	// call history
	recv._Uint8.History = append(recv._Uint8.History, struct {
		Params struct {
			P0 []uint8
		}
		Results struct {
			R0 uint8
		}
	}{
		Params:  recv._Uint8.Params,
		Results: recv._Uint8.Results,
	})
	// results
	return recv._Uint8.Results.R0
}

func (recv *MockcTypeCode) Uintptr(p0 ...uintptr) uintptr {
	recv._Uintptr.mu.Lock()
	defer recv._Uintptr.mu.Unlock()
	// basics
	recv._Uintptr.Called = true
	recv._Uintptr.CallCount++
	// params
	recv._Uintptr.Params.P0 = p0
	// body
	if recv._Uintptr.Body != nil {
		recv._Uintptr.Results.R0 = recv._Uintptr.Body(p0...)
	}
	// call history
	recv._Uintptr.History = append(recv._Uintptr.History, struct {
		Params struct {
			P0 []uintptr
		}
		Results struct {
			R0 uintptr
		}
	}{
		Params:  recv._Uintptr.Params,
		Results: recv._Uintptr.Results,
	})
	// results
	return recv._Uintptr.Results.R0
}
